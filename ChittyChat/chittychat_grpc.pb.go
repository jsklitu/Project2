// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ChittyChat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChittyClient is the client API for Chitty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittyClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinConfirm, error)
	Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*Message, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*Message, error)
}

type chittyClient struct {
	cc grpc.ClientConnInterface
}

func NewChittyClient(cc grpc.ClientConnInterface) ChittyClient {
	return &chittyClient{cc}
}

func (c *chittyClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinConfirm, error) {
	out := new(JoinConfirm)
	err := c.cc.Invoke(ctx, "/ChittyChat.Chitty/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyClient) Publish(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/ChittyChat.Chitty/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/ChittyChat.Chitty/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChittyServer is the server API for Chitty service.
// All implementations must embed UnimplementedChittyServer
// for forward compatibility
type ChittyServer interface {
	Join(context.Context, *JoinRequest) (*JoinConfirm, error)
	Publish(context.Context, *PublishMessage) (*Message, error)
	Leave(context.Context, *LeaveRequest) (*Message, error)
	mustEmbedUnimplementedChittyServer()
}

// UnimplementedChittyServer must be embedded to have forward compatible implementations.
type UnimplementedChittyServer struct {
}

func (UnimplementedChittyServer) Join(context.Context, *JoinRequest) (*JoinConfirm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChittyServer) Publish(context.Context, *PublishMessage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedChittyServer) Leave(context.Context, *LeaveRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedChittyServer) mustEmbedUnimplementedChittyServer() {}

// UnsafeChittyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittyServer will
// result in compilation errors.
type UnsafeChittyServer interface {
	mustEmbedUnimplementedChittyServer()
}

func RegisterChittyServer(s grpc.ServiceRegistrar, srv ChittyServer) {
	s.RegisterService(&Chitty_ServiceDesc, srv)
}

func _Chitty_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.Chitty/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chitty_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.Chitty/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyServer).Publish(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chitty_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.Chitty/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chitty_ServiceDesc is the grpc.ServiceDesc for Chitty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chitty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyChat.Chitty",
	HandlerType: (*ChittyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Chitty_Join_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Chitty_Publish_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Chitty_Leave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ChittyChat/chittychat.proto",
}
